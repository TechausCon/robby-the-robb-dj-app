# Definiere die verschiedenen Phasen deiner Pipeline
stages:
  - install
  - build
  - test
  - deploy

# Installiere Node.js, Abhängigkeiten und führe Tests durch
install_dependencies:
  stage: install
  image: node:16  # Verwende das Node.js Docker-Image
  script:
    - npm ci  # Verwendet "npm ci", um die Abhängigkeiten aus der package-lock.json zu installieren
  cache:
    paths:
      - node_modules/  # Cacht node_modules, damit die Abhängigkeiten nicht bei jedem Lauf neu installiert werden

# Baue die Anwendung (wenn du eine Build-Umgebung benötigst, wie Webpack)
build:
  stage: build
  script:
    - npm run build  # Führt den Build-Befehl aus, der in deiner package.json definiert ist
  artifacts:
    paths:
      - build/  # Speichert die Build-Ergebnisse als Artefakte für späteres Deploy

# Führe Tests aus (falls du Tests definiert hast)
test:
  stage: test
  script:
    - npm test  # Führt deine Tests aus, die in package.json definiert sind
  artifacts:
    paths:
      - test-reports/  # Speichert Testberichte als Artefakte (optional)

# Deployment (optional, falls du die Anwendung deployen möchtest)
deploy:
  stage: deploy
  script:
    - echo "Deploying to production server..."  # Beispiel für das Deployment-Skript
    # Hier kannst du dein tatsächliches Deployment-Skript einfügen
    # Zum Beispiel: scp build/* user@server:/path/to/deploy
  only:
    - master  # Nur auf dem Master-Branch wird deployt
